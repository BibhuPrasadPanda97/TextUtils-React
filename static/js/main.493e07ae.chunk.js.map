{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","console","log","document","getElementById","select","navigator","clipboard","writeText","getSelection","removeAllRanges","Alert","height","alert","role","word","wordLower","charAt","slice","capitalize","msg","defaultProps","aboutText","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"mMAIe,SAASA,EAAOC,GAC3B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAS,kCAAAC,OAAoCL,EAAMM,KAA1C,QAAAD,OAAqDL,EAAMM,OACrEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeG,KAAK,KAAKP,EAAMQ,OAC5CP,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iBAAiBK,KAAK,SAASC,iBAAe,WAAWC,iBAAe,0BAA0BC,gBAAc,yBAAyBC,gBAAc,QAAQC,aAAW,qBACxLb,EAAAC,EAAAC,cAAA,QAAMC,UAAU,yBAEpBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAA2BW,GAAG,0BACzCd,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mCACVH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACVH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAkBY,eAAa,OAAOT,KAAK,KAAxD,UAYRN,EAAAC,EAAAC,cAAA,OAAKC,UAAS,+BAAAC,OAAgD,UAAfL,EAAMM,KAAiB,OAAO,UACzEL,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mBAAmBa,QAASjB,EAAMkB,WAAYT,KAAK,WAAWM,GAAG,2BAClFd,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mBAAmBe,QAAQ,0BAA5C,uBC3BT,SAASC,EAASpB,GAC7B,IADoCqB,EAqCZC,qBArCYC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAqC7BK,EArC6BH,EAAA,GAqCvBI,EArCuBJ,EAAA,GAuCpC,OACItB,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0B,SAAA,KACI3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYyB,MAAO,CAACC,MAAoB,SAAb9B,EAAMM,KAAc,QAAQ,UAClEL,EAAAC,EAAAC,cAAA,UAAKH,EAAM+B,SACX9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,YAAUC,UAAU,eAAe4B,MAAON,EAAMO,SAbzC,SAACC,GAEpBP,EAAQO,EAAMC,OAAOH,QAWiEH,MAAO,CAACO,gBAA8B,SAAbpC,EAAMM,KAAc,UAAU,QAASwB,MAAoB,SAAb9B,EAAMM,KAAc,QAAQ,SAAUS,GAAG,eAAesB,KAAK,OAElNpC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,4BAA4Ba,QA7CpC,WAElB,IAAIqB,EAAUZ,EAAKa,cACnBZ,EAAQW,GACRtC,EAAMwC,UAAU,4BAA6B,aAyCrC,uBACAvC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,4BAA4Ba,QAvCpC,WAElB,IAAIqB,EAAUZ,EAAKe,cACnBd,EAAQW,GACRtC,EAAMwC,UAAU,4BAA6B,aAmCrC,uBACAvC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,4BAA4Ba,QAhCvC,WACfyB,QAAQC,IAAI,iBACZ,IAAIjB,EAAOkB,SAASC,eAAe,gBACnCnB,EAAKoB,SACLC,UAAUC,UAAUC,UAAUvB,EAAKM,OACnCY,SAASM,eAAeC,kBACxBnD,EAAMwC,UAAU,uBAAwB,aA0BhC,aACAvC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,4BAA4Ba,QAxBjC,WAErBU,EADc,IAEd3B,EAAMwC,UAAU,iBAAkB,aAqB1B,eAEJvC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiByB,MAAO,CAACC,MAAoB,SAAb9B,EAAMM,KAAc,QAAQ,UACvEL,EAAAC,EAAAC,cAAA,+BAGAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAd,WAEAH,EAAAC,EAAAC,cAAA,SAAIuB,KCzDL,SAAS0B,EAAMpD,GAM1B,OACIC,EAAAC,EAAAC,cAAA,OAAK0B,MAAO,CAACwB,OAAQ,SAChBrD,EAAMsD,OAASrD,EAAAC,EAAAC,cAAA,OAAKC,UAAS,eAAAC,OAAiBL,EAAMsD,MAAM7C,KAA7B,gCAAiE8C,KAAK,SAChGtD,EAAAC,EAAAC,cAAA,cARO,SAACqD,GAChB,IAAIC,EAAYD,EAAKf,cACrB,OAAOgB,EAAUC,OAAO,GAAGnB,cAAgBkB,EAAUE,MAAM,GAM1CC,CAAW5D,EAAMsD,MAAM7C,OADpB,KACsCT,EAAMsD,MAAMO,MFgC9E9D,EAAO+D,aAAe,CAClBtD,MAAO,iBACPuD,UAAW,SGkBAC,MAhDf,WAAe,IAAA3C,EACWC,mBAAS,SADpBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNf,EADMiB,EAAA,GACA0C,EADA1C,EAAA,GAAA2C,EAEa5C,mBAAS,MAFtB6C,EAAA3C,OAAAC,EAAA,EAAAD,CAAA0C,EAAA,GAENZ,EAFMa,EAAA,GAECC,EAFDD,EAAA,GAIP3B,EAAY,SAAC6B,EAAS5D,GAC1B2D,EAAS,CACPP,IAAKQ,EACL5D,KAAMA,IAGR6D,WAAW,WACTF,EAAS,OACR,OAcL,OACEnE,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0B,SAAA,KAII3B,EAAAC,EAAAC,cAACJ,EAAD,CAAQS,MAAM,YAAYF,KAAMA,EAAMY,WAhBzB,WACJ,UAATZ,GACF2D,EAAQ,QACRrB,SAAS2B,KAAK1C,MAAMO,gBAAkB,UACtCI,EAAU,uBAAwB,aAElCyB,EAAQ,SACRrB,SAAS2B,KAAK1C,MAAMO,gBAAkB,QACtCI,EAAU,wBAAyB,eASjCvC,EAAAC,EAAAC,cAACiD,EAAD,CAAOE,MAAOA,IACdrD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAMTH,EAAAC,EAAAC,cAACiB,EAAD,CAAUW,QAAQ,4BAA4BzB,KAAMA,EAAMkC,UAAWA,OC1CpEgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCDDY,IAASC,WAAW1C,SAASC,eAAe,SACpD0C,OACHtF,EAAAC,EAAAC,cAACF,EAAAC,EAAMsF,WAAP,KACEvF,EAAAC,EAAAC,cAACsF,EAAD,QAOJjB","file":"static/js/main.493e07ae.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                        </li>\r\n                        {/* <li className=\"nav-item\">\r\n                            <List className=\"nav-link active\" to=\"/about\">{props.aboutText}</List>\r\n                        </li> */}\r\n\r\n                    </ul>\r\n                    {/* <form className=\"d-flex\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                        <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\r\n                    </form> */}\r\n                    {/* Toggle Dark Mode */}\r\n                    <div className={`form-check form-switch text-${props.mode === 'light'?'dark':'light'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired\r\n}\r\n\r\n// Specifies the default values for props:\r\nNavbar.defaultProps = {\r\n    title: 'Set Title Here',\r\n    aboutText: 'About'\r\n};","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () => {\r\n        // console.log(\"Uppercase was clicked\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Text changed to UpperCase\", \"success\");\r\n    }\r\n\r\n    const handleLpClick = () => {\r\n        // console.log(\"Lowercase was clicked\" + text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Text changed to LowerCase\", \"success\");\r\n    }\r\n\r\n    // Handle copy text\r\n    const handleCopy = () => {\r\n        console.log(\"Text Copied!!\");\r\n        var text = document.getElementById('textBoxInput');\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        document.getSelection().removeAllRanges();\r\n        props.showAlert(\"Copied to Clipboard!\", \"success\");\r\n    }\r\n\r\n    const handleClearClick = () => {\r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"Text cleared!!\", \"success\");\r\n    }\r\n\r\n    const handleOnChange = (event) => {\r\n        // console.log(\"On Change\");\r\n        setText(event.target.value);\r\n        // console.log(event.target.value);\r\n    }\r\n\r\n    const [text, setText] = useState();\r\n    // let textLen = text.length;\r\n    return (\r\n        <>\r\n            <div className='container' style={{color: props.mode==='dark'?'white':'black'}}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'#293d51':'white', color: props.mode==='dark'?'white':'black'}} id=\"textBoxInput\" rows=\"5\"></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary mx-2 my-1\" onClick={handleUpClick}>Conver to UpperCase</button>\r\n                <button className=\"btn btn-primary mx-2 my-1\" onClick={handleLpClick}>Conver to LowerCase</button>\r\n                <button className=\"btn btn-primary mx-2 my-1\" onClick={handleCopy}>Copy Text</button>\r\n                <button className=\"btn btn-primary mx-2 my-1\" onClick={handleClearClick}>Clear Text</button>\r\n            </div>\r\n            <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n                <h2>Your text Summary</h2>\r\n                {/* <p>{text.split(\" \").length} workds and {text.length} characters</p> */}\r\n                {/* <p>{0.008 * text.split(\" \").length} minutes to read</p> */}\r\n                <h3 className='mt-3'>Preview</h3>\r\n                {/* <p>{textLen>0 ? text:\"Enter some text to preview\"}</p> */}\r\n                <p>{text}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word) => {\r\n        let wordLower = word.toLowerCase();\r\n        return wordLower.charAt(0).toUpperCase() + wordLower.slice(1);\r\n    }\r\n\r\n    return (\r\n        <div style={{height: '50px'}}>\r\n            {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n","// import logo from './logo.svg';\nimport './App.css';\nimport React, { useState } from 'react'\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   // Link\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light'); // Whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    });\n    // SetTimeout\n    setTimeout(() => {\n      setAlert(null)\n    }, 1500);\n  }\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = \"#0A305A\";\n      showAlert(\"Dark mode is enabled\", \"success\");\n    } else {\n      setMode('light');\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode is enabled\", \"success\");\n    }\n  }\n  return (\n    <>\n      {/* <Router> */}\n        {/* <Navbar title=\"TextUtils\" aboutText=\"About\" /> */}\n        {/* <Navbar/> */}\n        <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          {/* <Switch>\n            <Route exact path=\"/about\">\n              <About />\n            </Route>\n            <Route exact path=\"/\"> */}\n              <TextForm heading=\"Enter the Text to analyze\" mode={mode} showAlert={showAlert} />\n            {/* </Route>\n          </Switch> */}\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}